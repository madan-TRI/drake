##
#
# This file contains parameters defining an optimization problem for a very simple system with a quaternion DoF.
#
##

# Initial state
q_init : [1, 0, 0, 0, 0, 0, 0]
v_init : [0, 0, 0, 0, 0, 0]

# Target state
q_nom_start : [1, 0, 0, 0, 0, 0, 0]
q_nom_end : [0.525, 0.592, 0.158, 0.592, 0.5, 0.5, 0.5]

# Initial guess. The initial sequence of generalized positions is generated by
# linearly iterpolating between q_init and q_guess.
q_guess : [1, 0, 0, 0, 0, 0, 0]

# Cost Weights
Qq : [10, 10, 10, 10, 10, 10, 10]  # Running cost
Qv : [1, 1, 1, 1, 1, 1]
R : [0.1, 0.1, 0.1, 0.1, 0.1, 0.1]

Qfq : [100, 100, 100, 100, 100, 100, 100]  # Terminal cost
Qfv : [10, 10, 10, 10, 10, 10]

# Problem definition parameters
time_step : 0.05   # Discretization timestep (seconds)
num_steps : 40     # number of timesteps

# Solver parameters
max_iters : 200             # maximum Gauss-Newton iterations
method : "trust_region"     # solver method, {linesearch, trust_region}
linesearch : "armijo"       # linesearch strategy, {armino, backtracking}
proximal_operator : false   # whether to add a proximal operator cost term
rho_proximal : 0.0          # the proximal cost multiplier

# Method used to compute gradients of inverse dynamics, one of
# {forward_differences, central_differences, central_differences4, autodiff}
gradients_method: "central_differences"

# Playback/visualization parameters
play_target_trajectory : false
play_initial_guess : false
play_optimal_trajectory : true

# Debugging parameters
linesearch_plot_every_iteration : false
print_debug_data : false
save_solver_stats_csv : true
