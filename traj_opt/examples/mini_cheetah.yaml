# Initial state
q_init : [ 1.0, 0.0, 0.0, 0.0,    # base orientation
           0.0, 0.0, 0.29,        # base position
           0.0,-0.8, 1.6,
           0.0,-0.8, 1.6,
           0.0,-0.8, 1.6,
           0.0,-0.8, 1.6]

v_init : [0, 0, 0,
          0, 0, 0, 
          0, 0, 0,
          0, 0, 0,
          0, 0, 0,
          0, 0, 0]

# Target state
q_nom_start : [ 1.0, 0.0, 0.0, 0.0,
           0.5, 0.0, 0.29,
           0.0,-0.8, 1.6,
           0.0,-0.8, 1.6,
           0.0,-0.8, 1.6,
           0.0,-0.8, 1.6]
q_nom_end : [ 1.0, 0.0, 0.0, 0.0,
           0.5, 0.0, 0.29,
           0.0,-0.8, 1.6,
           0.0,-0.8, 1.6,
           0.0,-0.8, 1.6,
           0.0,-0.8, 1.6]

# Initial guess. The initial sequence of generalized positions is generated by
# linearly iterpolating between q_init and q_guess.
q_guess : [ 1.0, 0.0, 0.0, 0.0,
           0.0, 0.0, 0.29,
           0.0,-0.8, 1.6,
           0.0,-0.8, 1.6,
           0.0,-0.8, 1.6,
           0.0,-0.8, 1.6]

# Cost Weights
Qq : [2, 2, 2, 2,
      5, 5, 5,
      0, 0, 0,
      0, 0, 0,
      0, 0, 0,
      0, 0, 0]

Qv : [1, 1, 1,
      1, 1, 1, 
      0.1, 0.1, 0.1,
      0.1, 0.1, 0.1,
      0.1, 0.1, 0.1,
      0.1, 0.1, 0.1]

R : [1, 1, 1,
     1, 1, 1, 
     0.01, 0.01, 0.01,
     0.01, 0.01, 0.01,
     0.01, 0.01, 0.01,
     0.01, 0.01, 0.01]

Qfq : [5, 5, 5, 5,
      10, 10, 10,
      1, 1, 1,
      1, 1, 1,
      1, 1, 1,
      1, 1, 1]

Qfv : [1, 1, 1,
      1, 1, 1, 
      0.1, 0.1, 0.1,
      0.1, 0.1, 0.1,
      0.1, 0.1, 0.1,
      0.1, 0.1, 0.1]

# Problem definition parameters
time_step : 0.05   # Discretization timestep (seconds)
num_steps : 30     # number of timesteps

# Solver parameters
max_iters : 50             # maximum Gauss-Newton iterations
method : "trust_region"    # solver method, {linesearch, trust_region}
scaling : true
equality_constraints : true
normalize_quaternions : false
linear_solver : pentadiagonal_lu
num_threads : 4

# Convergence thresholds
tolerances:
  rel_cost_reduction: 0
  abs_cost_reduction: 0
  rel_gradient_along_dq: 0
  abs_gradient_along_dq: 0
  rel_state_change: 0
  abs_state_change: 0

# Method used to compute gradients of inverse dynamics, one of
# {forward_differences, central_differences, central_differences4, autodiff}
gradients_method: "forward_differences"

# Playback/visualization parameters
play_target_trajectory : false
play_initial_guess : false
play_optimal_trajectory : true

# Debugging parameters
linesearch_plot_every_iteration : false
print_debug_data : false
save_solver_stats_csv : true

# Contact model parameters. 
# With no force at a distance, the normal component of contact force increases
# quadratically from 0 Newtons at 0 meters penetration to F Newtons at delta
# meters of penetration. After this point, force increases linearly at a rate
# of 2F/delta Newtons / meter. 
F : 20.0      # force at delta meters of penetration
delta : 0.01  # penetration distance with F newtons of normal force
dissipation_velocity : 0.1  # Hunt & Crossley-like model parameter, in m/s.

# With force at a distance, contact normal forces increases linearly at a rate
# of 2F/delta Newtons / meter, with a given smoothing factor (higher is smoother)
smoothing_factor : 40.0
force_at_a_distance : true

# Friction
friction_coefficient : 1.0  # Coefficient of friction.
stiction_velocity: 0.5     # Regularization velocity, in m/s.

# MPC parameters
mpc : false
mpc_iters : 1
controller_frequency : 20
sim_time : 5
sim_time_step : 1e-3
sim_realtime_rate : 0.0
feed_forward : true
Kp : [0, 0, 0, 0,    # base orientation
      0, 0, 0,       # base position
      50, 50, 50,
      50, 50, 50,
      50, 50, 50,
      50, 50, 50]
Kd : [0, 0, 0,
      0, 0, 0, 
      2, 2, 2,
      2, 2, 2,
      2, 2, 2,
      2, 2, 2]