##
#
# This file contains parameters for the acrobot swingup problem.
#
##

# Initial state ([shoulder, elbow])
q_init : [0.0, 0.0, 0.0, 0.3, -0.9]
v_init : [0.0, 0.0, 0.0, 0.0, 0.0]

# Target state
q_nom_start : [1.0, 0.0, 0.0, 0.2, 0.0]
q_nom_end : [1.0, 0.0, 0.0, 0.2, 0.0]

# Initial guess. The initial sequence of generalized positions is generated by
# linearly iterpolating between q_init and q_guess.
q_guess : [0.0, 0.0, 0.0, 0.3, -0.6]

# Cost Weights. These define diagonal matrices, again with the ordering
# [finger 1, finger 2, spinner]
Qq : [1.0, 1.0, 1.0, 0., 0.]  # Running cost
Qv : [0, 0, 0, 0, 0]
R : [5e-2, 5e-2, 5e-2, 1e-1, 1e-1]

Qfq : [10, 10, 10, 0., 0.]  # Terminal cost
Qfv : [.0, .0, .0, .0, .0]

# Problem definition parameters
time_step : 0.05   # Discretization timestep (seconds)
num_steps : 40     # number of timesteps

# Solver parameters
max_iters : 200             # maximum Gauss-Newton iterations
method : "trust_region"     # solver method, {linesearch, trust_region}
exact_hessian : false
scaling : true
scaling_method : "double_sqrt"
equality_constraints : true

Delta0 : 1e-3

tolerances:
  rel_cost_reduction: 0
  abs_cost_reduction: 0
  rel_gradient_along_dq: 0
  abs_gradient_along_dq: 0
  rel_state_change: 0
  abs_state_change: 0

linear_solver : "pentadiagonal_lu"

# Method used to compute gradients of inverse dynamics, one of
# {forward_differences, central_differences, central_differences4, autodiff}
gradients_method: "central_differences"

# Playback/visualization parameters
play_target_trajectory : true
play_initial_guess : true
play_optimal_trajectory : true

# Debugging parameters
linesearch_plot_every_iteration : false
print_debug_data : false
save_solver_stats_csv : true

# Contact model parameters. 
contact_stiffness : 500     # normal force stiffness, in N/m
dissipation_velocity : 0.1  # Hunt & Crossley-like model parameter, in m/s.

# Amount of smoothing (and therefore force at a distance) to apply when
# computing normal forces. This is equivalent to an analytical version of
# randomized smoothing, assuming that signed distances are drawn from a logistic
# distirbution with the smoothing factor as the scale parameter. Higher values
# mean more smoothing and more force at a distance. 
smoothing_factor : 0.001

# Friction
friction_coefficient : 1.0  # Coefficient of friction.
stiction_velocity: 0.01     # Regularization velocity, in m/s.