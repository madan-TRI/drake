##
#
# This file contains parameters defining the punyo hug optimization problem,
# where a squishy humanoid robot is tasked with picking up a large object by
# hugging it.
#
##

# Initial state
q_init : [-0.1,                     # height
          0.0, 0.0, 0.0,            # torso
          1.0, 0.1, 0.5, 0.0, 0.0,  # right arm
          1.0, 0.1, 0.5, 0.0, 0.0,  # left arm
          1.0, 0.0, 0.0, 0.0,       # ball orientation
          0.0, 0.3, 0.3]            # ball position
v_init : [0.0,
          0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0,
          0.0, 0.0, 0.0]

# Target state
q_nom_start : [0.0,
               0.0, 0.0, 0.0,
               1.0, 0.1, 0.5, 0.0, 0.0,
               1.0, 0.1, 0.5, 0.0, 0.0,
               1.0, 0.0, 0.0, 0.0,
               0.0, 0.3, 0.3]
q_nom_end : [0.0,
             0.0, 0.0, 0.0,
             1.0, 0.1, 0.5, 0.0, 0.0,
             1.0, 0.1, 0.5, 0.0, 0.0,
             1.0, 0.0, 0.0, 0.0,
             0.2, 0.3, 1.0]

# Initial guess. The initial sequence of generalized positions is generated by
# linearly iterpolating between q_init and q_guess.
#q_guess : [-0.1,            # matching q_init
#           0.0, 0.0, 0.0,
#           1.0, 0.1, 0.5, 0.0, 0.0,
#           1.0, 0.1, 0.5, 0.0, 0.0,
#           1.0, 0.0, 0.0, 0.0,
#           0.0, 0.3, 0.3]
q_guess : [0.0,             # matching q_nom_end
           0.0, 0.0, 0.0,
           1.0, 0.1, 0.5, 0.0, 0.0,
           1.0, 0.1, 0.5, 0.0, 0.0,
           1.0, 0.0, 0.0, 0.0,
           0.2, 0.3, 1.0]

# Cost Weights
Qq : [10, 
      0, 0, 0, 
      0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0,
      1, 1, 1, 1,
      100, 1, 100]
Qv : [100, 
      1, 1, 1, 
      1, 1, 1, 1, 1, 
      1, 1, 1, 1, 1,
      1, 1, 1,
      1, 1, 1]
R : [1e-4, 
     1e-2, 1e-2, 1e-2, 
     1e-2, 1e-2, 1e-2, 1e-2, 1e-2, 
     1e-2, 1e-2, 1e-2, 1e-2, 1e-2,
     1e4, 1e4, 1e4,
     1e3, 1e3, 1e3]

Qfq : [10, 
       0, 0, 0, 
       0, 0, 0, 0, 0, 
       0, 0, 0, 0, 0, 
       1, 1, 1, 1,
       100, 100, 100]
Qfv : [10, 
       1, 1, 1, 
       1, 1, 1, 1, 1, 
       1, 1, 1, 1, 1,
       1, 1, 1,
       1, 1, 1]

# Problem definition parameters
time_step : 0.05    # Discretization timestep (seconds)
num_steps : 40      # number of timesteps

# Solver parameters
max_iters : 500            # maximum Gauss-Newton iterations
method : "trust_region"     # solver method, {linesearch, trust_region}
tolerances:
  rel_cost_reduction: 1e-6
  abs_cost_reduction: 1e-12
  rel_gradient_along_dq: 1e-6
  abs_gradient_along_dq: 1e-12
  rel_state_change: 1e-6
  abs_state_change: 1e-12

# Method used to compute gradients of inverse dynamics, one of
# {forward_differences, central_differences, central_differences4, autodiff}
gradients_method: "forward_differences"

# Playback/visualization parameters
play_target_trajectory : true
play_initial_guess : true
play_optimal_trajectory : true

# Debugging parameters
linesearch_plot_every_iteration : false
print_debug_data : false
save_solver_stats_csv : true

# Contact model parameters
F : 1.0       # force at delta meters of penetration
delta : 0.01  # penetration distance with F newtons of normal force
stiffness_exponent : 2      # Compliant law exponent.
dissipation_exponent : 1.0  # Hunt & Crossley-like model. Law exponent.
dissipation_velocity : 0.01  # Hunt & Crossley-like model parameter, in m/s.

# Force at a distance parameters. If force at a distance is enabled,
# we still use F and delta to determine compliance, but assume
# stiffness_exponent = 1 and smooth out the contact forces according
# to the given factor (lower is smoother).
force_at_a_distance : true
smoothing_factor : 140

# Friction
friction_coefficient : 0.5  # Coefficient of friction.
stiction_velocity: 0.05     # Regularization velocity, in m/s.
