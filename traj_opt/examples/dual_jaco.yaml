##
#
# This file contains parameters for an example where a single jaco arm pushes a
# box. 
#
##

# Initial state
q_init : [1.87, 1.7, 0.0, 4.8, 0.3, 4.5, 0.0,   # left arm positions
          1.27, 1.7, 0.0, 4.8,-0.3, 4.5, 0.0,   # right arm positions
          1.0, 0.0, 0.0, 0.0,                  # box orientation
          0.5, 0.0, 0.08]                       # box position
v_init : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

# Target state
q_nom_start : [1.87, 1.7, 0.0, 4.8, 0.3, 4.5, 0.0,
               1.27, 1.7, 0.0, 4.8,-0.3, 4.5, 0.0,
               0.7, 0.3, 0.0, 0.0,
               0.5, 0.0, 0.1]
q_nom_end : [1.87, 1.7, 0.0, 4.8, 0.3, 4.5, 0.0,
             1.27, 1.7, 0.0, 4.8,-0.3, 4.5, 0.0,
             0.7, 0.3, 0.0, 0.0,
             0.5, 0.0, 0.1]

# Initial guess. The initial sequence of generalized positions is generated by
# linearly iterpolating between q_init and q_guess.
q_guess : [1.87, 1.7, 0.0, 4.8, 0.3, 4.5, 0.0,
           1.27, 1.7, 0.0, 4.8,-0.3, 4.5, 0.0,
           1.0, 0.0, 0.0, 0.0,
           0.5, 0.0, 0.08]

# Cost Weights
Qq: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
     1, 1, 1, 1,
     1, 1, 1]
Qv: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
     0.1, 0.1, 0.1,
     0.1, 0.1, 0.1]
R: [1e-3, 1e-3, 1e-3, 1e-3, 1e-3, 1e-3, 1e-3,
    1e-3, 1e-3, 1e-3, 1e-3, 1e-3, 1e-3, 1e-3,
    1e3, 1e3, 1e3,
    1e3, 1e3, 1e3]

Qfq: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
      0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
      10, 10, 10, 10,
      10, 10, 10]
Qfv: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0,
      1.0, 1.0, 1.0]

# Problem definition parameters
time_step : 0.05    # Discretization timestep (seconds)
num_steps : 25      # number of timesteps

# Solver parameters
max_iters : 0              # maximum Gauss-Newton iterations
method : "trust_region"     # solver method, {linesearch, trust_region}
scaling : true
equality_constraints : false
num_threads : 4

tolerances:
  rel_cost_reduction: 0
  abs_cost_reduction: 0
  rel_gradient_along_dq: 0
  abs_gradient_along_dq: 0
  rel_state_change: 0
  abs_state_change: 0

# Method used to compute gradients of inverse dynamics, one of
# {forward_differences, central_differences, central_differences4, autodiff}
gradients_method: "forward_differences"

# Playback/visualization parameters
play_target_trajectory : false
play_initial_guess : false
play_optimal_trajectory : false

# Debugging parameters
linesearch_plot_every_iteration : false
print_debug_data : false
save_solver_stats_csv : true

# Contact model parameters. 
# With no force at a distance, the normal component of contact force increases
# quadratically from 0 Newtons at 0 meters penetration to F Newtons at delta
# meters of penetration. After this point, force increases linearly at a rate
# of 2F/delta Newtons / meter. 
F : 2.0       # force at delta meters of penetration
delta : 0.01  # penetration distance with F newtons of normal force
dissipation_velocity : 0.1  # Hunt & Crossley-like model parameter, in m/s.

# With force at a distance, contact normal forces increases linearly at a rate
# of 2F/delta Newtons / meter, with a given smoothing factor (higher is smoother)
smoothing_factor : 2.0
force_at_a_distance : true

# Friction
friction_coefficient : 0.5  # Coefficient of friction.
stiction_velocity: 0.05      # Regularization velocity, in m/s.

# MPC parameters
mpc : false
mpc_iters : 1
controller_frequency : 15.0
sim_time : 10
sim_time_step : 5e-3
sim_realtime_rate : 0.0
feed_forward : false
Kp: [500, 500, 250, 500, 250, 250, 250,
     500, 500, 250, 500, 250, 250, 250,
     0, 0, 0, 0, 0, 0, 0]
Kd: [50, 50, 25, 50, 25, 25, 25,
     50, 50, 25, 50, 25, 25, 25,
     0, 0, 0, 0, 0, 0]
