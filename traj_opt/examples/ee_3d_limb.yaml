##
#
# This file contains parameters for the acrobot swingup problem.
#
##

# 1: # -0.65, 0.881
# 2: # -0.049, 0.961
# 3: # -0.501, 1.253
# 4: # 0.019, 1.268
# 5: # -0.834,  1.474
# 6: -0.726  1.584

# Initial state ([shoulder, elbow])
q_init : [-0.72, 1.92, -1.68, 1.42, 1.86, 4.87, 0.64, 0.0, 0.0]
v_init : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

# Target state
q_nom_start : [-0.72, 1.92, -1.68, 1.42, 1.86, 4.87, 0.64, 0.0, 0.0]
q_nom_end : [-0.72, 1.92, -1.68, 1.42, 1.86, 4.87, 0.64, -0.726, 1.584] # -0.049, 0.961
# q_nom_relative_to_q_init: [false, false, false, true, true]

# Initial guess. The initial sequence of generalized positions is generated by
# linearly iterpolating between q_init and q_gue
use_demonstration : true
q_guess : [-0.72, 1.92, -1.68, 1.42, 1.86, 4.87, 0.64, -0.726, 1.584] # -0.65, 0.881

# Cost Weights. These define diagonal matrices, again with the ordering
# [finger 1, finger 2, spinner]
Qq : [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 1, 1]  # Running cost
Qv : [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 1, 1]
R : [0.01, 0.01, 0.01, 0.0, 0.0, 0.0, 0.0, 1e4, 1e4]

Qfq : [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 1e5, 1e5]  # Terminal cost
Qfv : [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 10, 10]

# Joint limits
q_min: [-2, -2, -2, -2, -2, -2, -2, -0.6, 0]
q_max:  [2, 2, 2, 2, 2, 2, 2, 0.2, 0.2]

# Joint limit cost weights
Qlq : [0, 0, 0, 0, 0, 0, 0, 1e11, 1e11]
# Qlq : [0, 0, 0, 0., 0.]

# Contact force cost
force_threshold: 0.01
Qcf : 0

# Problem definition parameters
time_step : 0.1   # Discretization timestep (seconds)
num_steps : 25     # number of timesteps

# Solver parameter
max_iters : 400            # maximum Gauss-Newton iterations
method : "trust_region"     # solver method, {linesearch, trust_region}
exact_hessian : false
scaling : true
scaling_method : "adaptive_sqrt"
equality_constraints : false
normalize_quaternions : false
num_threads : 16

Delta0 : 1e-3

tolerances:
  rel_cost_reduction: 0
  abs_cost_reduction: 0
  rel_gradient_along_dq: 0
  abs_gradient_along_dq: 0
  rel_state_change: 0
  abs_state_change: 0

# linear_solver : "pentadiagonal_lu"

# Method used to compute gradients of inverse dynamics, one of
# {forward_differences, central_differences, central_differences4, autodiff}
gradients_method: "forward_differences"

# Playback/visualization parameters
play_target_trajectory : false
play_initial_guess : false
play_optimal_trajectory : true

# Debugging parameters
linesearch_plot_every_iteration : false
print_debug_data : false
save_solver_stats_csv : true

# Contact model parameters. 
contact_stiffness : 1000     # normal force stiffness, in N/m
dissipation_velocity : 0.1  # Hunt & Crossley-like model parameter, in m/s.

# Amount of smoothing (and therefore force at a distance) to apply when
# computing normal forces. This is equivalent to an analytical version of
# randomized smoothing, assuming that signed distances are drawn from a logistic
# distirbution with the smoothing factor as the scale parameter. Higher values
# mean more smoothing and more force at a distance. 
smoothing_factor : 0.001

# Friction
friction_coefficient : 1  # Coefficient of friction.
stiction_velocity: 0.1   # Regularization velocity, in m/s.

mpc : true
mpc_iters : 5
controller_frequency : 50
sim_time : 10
sim_time_step : 5e-3
sim_realtime_rate : 0.0
# feed_forward : false
Kp : [500, 500, 250, 500, 250, 250, 250, 0, 0]
Kd : [50, 50, 25, 50, 25, 25, 25, 0, 0]